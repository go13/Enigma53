#!/usr/bin/python
import os#, jinja2, scrubber

virtenv = os.environ['APPDIR'] + '/virtenv/'

#virtenv = 'E:/PianoHackaton/PianoOpenshift/wsgi/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python-2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__ = virtualenv))
except IOError:
    pass

from flask import Flask, render_template, redirect
from flask_flatpages import FlatPages

from flask_login import LoginManager, login_required, current_user
#from flask_openid import OpenID

from question.question_bp import question_bp
from user.user_bp import user_bp
from quiz.quiz_results_bp import quiz_results_bp
from quiz.quiz_bp import quiz_bp
from auth.auth_bp import auth_bp
from auth.user import User, Anonymous

DEBUG = True
FLATPAGES_AUTO_RELOAD = DEBUG
TRAP_BAD_REQUEST_ERRORS = True
FLATPAGES_EXTENSION = '.md'
SECRET_KEY = "development key"
 
application = Flask(__name__)
application.config.from_object(__name__)
pages = FlatPages(application)


application.register_blueprint(question_bp, url_prefix = '/question')
application.register_blueprint(quiz_bp, url_prefix = '/quiz')
application.register_blueprint(quiz_results_bp, url_prefix = '/quiz/results')
application.register_blueprint(user_bp, url_prefix = '/user')
application.register_blueprint(auth_bp, url_prefix = '/auth')

login_manager = LoginManager()

login_manager.anonymous_user = Anonymous
login_manager.login_view = "auth_bp.login"
login_manager.login_message = u"Please log in to access this page."
login_manager.refresh_view = "auth_bp.reauth"

#-------filters-------

#def sanitize_html(text):
#    scrubb = scrubber.Scrubber()
#    return jinja2.Markup(scrubb.scrub(text))

#jinja2.filters.FILTERS['sanitize_html'] = sanitize_html

#-------auth-------

@login_manager.user_loader
def load_user(uid):
    return User.get_user_by_id(int(uid))

login_manager.init_app(application)

#-------routings-------

@application.route('/')
def index():
    if current_user.id > 0:
        return redirect('/quiz/list/')
    else:
        return redirect('/auth/login/')

@application.route('/<path:path>/')
def page(path):
    page = pages.get_or_404(path)
    return render_template('page.html', page=page)

if __name__ == '__main__':
    application.run()