#!/usr/bin/python
import os

virtenv = os.environ['APPDIR'] + '/virtenv/'

#virtenv = 'E:/PianoHackaton/PianoOpenshift/wsgi/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python-2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass

from flask import Flask, render_template, \
        g, session, request, redirect, url_for, flash 
from flask_flatpages import FlatPages

from flask_login import LoginManager, current_user, login_required, \
                             login_user, logout_user, UserMixin, AnonymousUser, \
                             confirm_login, fresh_login_required
#from flask_openid import OpenID

from question.question_bp import question_bp
from user.user_bp import user_bp
from quiz.quiz_results_bp import quiz_results_bp
from quiz.quiz_bp import quiz_bp
from auth.user import User, Anonymous

DEBUG = True
FLATPAGES_AUTO_RELOAD = DEBUG
TRAP_BAD_REQUEST_ERRORS = True
FLATPAGES_EXTENSION = '.md'
SECRET_KEY = "development key"
 
application = Flask(__name__)
application.config.from_object(__name__)
pages = FlatPages(application)


application.register_blueprint(question_bp, url_prefix='/question')
application.register_blueprint(quiz_bp, url_prefix='/quiz')
application.register_blueprint(quiz_results_bp, url_prefix='/quiz/results')
application.register_blueprint(user_bp, url_prefix='/user')

login_manager = LoginManager()

login_manager.anonymous_user = Anonymous
login_manager.login_view = "login"
login_manager.login_message = u"Please log in to access this page."
login_manager.refresh_view = "reauth"

@login_manager.user_loader
def load_user(id):
    return User.get_user_by_id(int(id))

login_manager.setup_app(application)

@application.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST" and "email" in request.form:
        email = request.form["email"]
        user = User.get_user_by_email(email)
        if user:
            remember = request.form.get("remember", "no") == "yes"
            if login_user(user, remember=remember):
                flash("Logged in!")
                return redirect(request.args.get("next") or url_for("index"))
            else:
                flash("Sorry, but you could not log in.")
        else:
            flash(u"Invalid username.")
    return render_template("login.html")

@application.route("/signup", methods=["GET", "POST"])
def signup():
    if request.method == "POST" and "email" in request.form:
        fullname = request.form["fullname"]        
        email = request.form["email"]
        password = request.form["password"]

        user = User.get_user_by_email(email)
        
        if not user:
            user = User.add_user(fullname, email, password)           
            if login_user(user, False):
                print 'account created'
                #flash(u"Account created!", "success")
                return redirect(url_for("index"))
            #else:
            #    flash(u"Sorry, but you could not log in.", "error")
        #else:
        #    flash(u"This email already registered. Please login.", "error")
    return render_template("signup.html")


@application.route("/reauth", methods=["GET", "POST"])
@login_required
def reauth():
    if request.method == "POST":
#        confirm_login()
        #flash(u"Reauthenticated.")
        return redirect(request.args.get("next") or url_for("index"))
    return render_template("reauth.html")


@application.route("/logout")
@login_required
def logout():
    logout_user()
    flash("Logged out.")
    return redirect(url_for("index"))

#-------routings-------

@application.route('/')
@login_required
def index():
    return redirect("/quiz/list/") #render_template('index.html', pages=pages)

@application.route('/<path:path>/')
def page(path):
    page = pages.get_or_404(path)
    return render_template('page.html', page=page)

if __name__ == '__main__':
    application.run()    