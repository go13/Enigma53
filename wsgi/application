#!/usr/bin/python
import os

#virtenv = os.environ['APPDIR'] + '/virtenv/'
from wtforms.widgets import html_params, HTMLString

virtenv = 'E:/PianoHackaton/PianoOpenshift/wsgi/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python-2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass

from flask import Flask, render_template, request, redirect, url_for
from flask_flatpages import FlatPages
from flask.ext.wtf import Form, SelectMultipleField , SubmitField, RadioField, SelectField, BooleanField
from wtforms import widgets
#from flask.ext.login import LoginManager, current_user, login_required,
#                             login_user, logout_user, UserMixin, AnonymousUser,
#                             confirm_login, fresh_login_required
from model import Quiz, Question

DEBUG = True
FLATPAGES_AUTO_RELOAD = DEBUG
FLATPAGES_EXTENSION = '.md'
 
application = Flask(__name__)
application.config.from_object(__name__)
pages = FlatPages(application)
 
@application.route('/')
def index():
   # user=User.get_user_by_id(7)
   # flash("Logged out.")
    return render_template('index.html', pages=pages)


@application.route("/login", methods=["GET", "POST"])
def login():
    return render_template('login.html')

@application.route('/user/<path:path>/')
def user(path):
    #user=User.get_user_by_id(path)
    return render_template('user.html')#, pages=pages, user=user)

@application.route('/quiz/<int:quiz_id>/')
def quiz(quiz_id):
    quiz=Quiz.get_quiz_by_id(quiz_id)
    if quiz:
        return render_template('quiz.html', pages=pages, quiz=quiz)
    else:
        page = pages.get_or_404(quiz_id)
        return render_template('page.html', page=page)

class Question_Submit_Form(Form):
    answer = SelectMultipleField(
        choices = [],
        default = [],
        option_widget=widgets.CheckboxInput(),
        widget=widgets.ListWidget(prefix_label=False, html_tag='ol')
    )
    submit = SubmitField("Submit")

@application.route('/question/<int:question_id>/')
def question(question_id):
    action = request.args.get('action')
    question=Question.get_question_by_id(question_id)

    if action == 'edit':
        return render_template('question/question_edit.html', pages=pages, question=question)
    else:
        if question:
            form=Question_Submit_Form(csrf_enabled=False)

            choises = []
            for q in question.answerList:
                choises.append((q.id, q.answer))
            form.answer.choices = choises

            return render_template('question/question.html', pages=pages, question=question, form=form)
        else:
            page = pages.get_or_404(question_id)
            return render_template('page.html', page=page)

@application.route('/question/submit_question',methods=['GET','POST'])
def submit_question():

    return redirect(url_for('question',question_id=1))

@application.route('/<path:path>/')
def page(path):
    page = pages.get_or_404(path)
    return render_template('page.html', page=page)

#
#@application.route("/login", methods=["GET", "POST"])
#def login():
#    if request.method == "POST" and "username" in request.form:
#        username = request.form["username"]
#        if username in USER_NAMES:
#            remember = request.form.get("remember", "no") == "yes"
#            if login_user(USER_NAMES[username], remember=remember):
#                flash("Logged in!")
#                return redirect(request.args.get("next") or url_for("index"))
#            else:
#                flash("Sorry, but you could not log in.")
#        else:
#            flash(u"Invalid username.")
#    return render_template("login.html")
#
#@application.route("/logout")
#@login_required
#def logout():
#    logout_user()
#    flash("Logged out.")
#    return redirect(url_for("index"))
#
#
# Below for testing only
#
if __name__ == '__main__':
    application.run()
 